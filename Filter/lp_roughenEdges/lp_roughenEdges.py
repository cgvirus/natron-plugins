# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_roughenEdgesExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_roughenEdgesExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_roughenEdges"

def getLabel():
    return "lp_roughenEdges"

def getVersion():
    return 2

def getGrouping():
    return "Filter"

def getPluginDescription():
    return "Roughens a given alpha channel based on an adjustable noise.\n\nINPUTS\nimg = Connect the image you want to roughen the edges of.\n\nHOW TO USE IT\nPlay with the roughen and size to get a desired amount and look for your edges. You can adust the type to greatly influence the look of the roughend result. Further, you can adjust a motion-factor to let the roughen-layer animate over time.\n\nHOW DOES IT WORK\nA simple noise hooks up to an iDistort node, so the roughen is basically a distortion of the edges."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(1, 0.6667, 0)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createDouble2DParam("diststrength", "roughen")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(50, 1)
    param.setDefaultValue(5, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Sets the strength how much the edge will be roughend.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.diststrength = param
    del param

    param = lastNode.createDouble2DParam("SeNoise1noiseSize", "size")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(2, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setDisplayMinimum(1, 1)
    param.setDisplayMaximum(50, 1)
    param.setDefaultValue(2, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Sets the size of the roughen operation.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.SeNoise1noiseSize = param
    del param

    param = lastNode.createChoiceParam("SeNoise1noiseType", "type")
    param.setDefaultValue(2)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Sets type of edge roughen operation.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.SeNoise1noiseType = param
    del param

    param = lastNode.createChoiceParam("SeNoise1voronoiType", "voronoi type")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Works only if \'type\' is set to Voronoi. Adjusts its sub-type.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.SeNoise1voronoiType = param
    del param

    param = lastNode.createDoubleParam("noiseani", "motion factor")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Multiplies the seed-animation to receive slight or strong changes of the roughend edghe over time.\nA value of 1 should already give completely new results each frame.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.noiseani = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createInt2DParam("Erode1size", "pre-erode")
    param.setMinimum(-1000, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(-50, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1000, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(-50, 1)
    param.setDisplayMaximum(50, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Erodes/dialtes the alpha before roughen takes place.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Erode1size = param
    del param

    param = lastNode.createDouble2DParam("Blur1size", "blur")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(50, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(50, 1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Softens the roughend edge.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.Blur1size = param
    del param

    param = lastNode.createSeparatorParam("sep02", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createBooleanParam("unpremultiy", "(un)premult")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Unpremults the input before and premultiplies after the operation.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.unpremultiy = param
    del param

    param = lastNode.createStringParam("credit", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("lp_roughenEdges v2.0\n(c)2016 lucas pfaff")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.credit = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "IDistort1"
    lastNode = app.createNode("net.sf.openfx.IDistort", 2, group)
    lastNode.setScriptName("IDistort1")
    lastNode.setLabel("IDistort1")
    lastNode.setPosition(2713, 280)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupIDistort1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("channelV")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("channelA")
    if param is not None:
        param.set("1")
        del param

    param = lastNode.getParam("uvOffset")
    if param is not None:
        param.setValue(0.28, 0)
        param.setValue(0.28, 1)
        del param

    param = lastNode.getParam("uvScale")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    del lastNode
    # End of node "IDistort1"

    # Start of node "SeNoise1"
    lastNode = app.createNode("net.sf.openfx.SeNoise", 1, group)
    lastNode.setScriptName("SeNoise1")
    lastNode.setLabel("SeNoise1")
    lastNode.setPosition(3111, 165)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.75, 0.75, 0.75)
    groupSeNoise1 = lastNode

    param = lastNode.getParam("noiseSize")
    if param is not None:
        param.setValue(2, 0)
        param.setValue(2, 1)
        del param

    param = lastNode.getParam("noiseZ")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("noiseType")
    if param is not None:
        param.set("fbm")
        del param

    param = lastNode.getParam("voronoiType")
    if param is not None:
        param.set("cell")
        del param

    param = lastNode.getParam("fbmOctaves")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("fbmGain")
    if param is not None:
        param.setValue(0.95, 0)
        del param

    del lastNode
    # End of node "SeNoise1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(2713, 761)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(2713, -525)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(2758, 5)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(3144, 5)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Unpremult1"
    lastNode = app.createNode("net.sf.openfx.Unpremult", 2, group)
    lastNode.setScriptName("Unpremult1")
    lastNode.setLabel("Unpremult1")
    lastNode.setPosition(2713, -447)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupUnpremult1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Unpremult1"

    # Start of node "Erode1"
    lastNode = app.createNode("net.sf.cimg.CImgErode", 2, group)
    lastNode.setScriptName("Erode1")
    lastNode.setLabel("Erode1")
    lastNode.setPosition(2713, -127)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErode1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Erode1"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(3144, 289)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Constant1_2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1_2")
    lastNode.setLabel("Constant1_2")
    lastNode.setPosition(2869, -368)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1_2 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("project")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Constant1_2"

    # Start of node "Dot4_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4_2")
    lastNode.setLabel("Dot4_2")
    lastNode.setPosition(2758, -359)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4_2 = lastNode

    del lastNode
    # End of node "Dot4_2"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(2713, -254)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("under")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "IDistort2"
    lastNode = app.createNode("net.sf.openfx.IDistort", 2, group)
    lastNode.setScriptName("IDistort2")
    lastNode.setLabel("IDistort2")
    lastNode.setPosition(2713, 394)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupIDistort2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("channelU")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("channelV")
    if param is not None:
        param.set("uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("channelA")
    if param is not None:
        param.set("1")
        del param

    param = lastNode.getParam("uvOffset")
    if param is not None:
        param.setValue(0.28, 0)
        param.setValue(0.28, 1)
        del param

    param = lastNode.getParam("uvScale")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    del lastNode
    # End of node "IDistort2"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(2713, 511)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(2713, 628)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Premult1"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(3099, 56)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupIDistort1.connectInput(0, groupDot1)
    groupIDistort1.connectInput(1, groupDot3)
    groupSeNoise1.connectInput(0, groupGrade1)
    groupOutput1.connectInput(0, groupPremult1)
    groupDot1.connectInput(0, groupErode1)
    groupDot2.connectInput(0, groupDot1)
    groupUnpremult1.connectInput(0, groupimg)
    groupErode1.connectInput(0, groupMerge1)
    groupDot3.connectInput(0, groupSeNoise1)
    groupConstant1_2.connectInput(0, groupDot4_2)
    groupDot4_2.connectInput(0, groupUnpremult1)
    groupMerge1.connectInput(0, groupDot4_2)
    groupMerge1.connectInput(1, groupConstant1_2)
    groupIDistort2.connectInput(0, groupIDistort1)
    groupIDistort2.connectInput(1, groupDot3)
    groupBlur1.connectInput(0, groupIDistort2)
    groupPremult1.connectInput(0, groupBlur1)
    groupGrade1.connectInput(0, groupDot2)

    param = groupIDistort1.getParam("uvScale")
    param.setExpression("thisGroup.diststrength.get()[dimension]", False, 0)
    param.setExpression("thisGroup.diststrength.get()[dimension]", False, 1)
    del param
    param = groupSeNoise1.getParam("noiseSize")
    group.getParam("SeNoise1noiseSize").setAsAlias(param)
    del param
    param = groupSeNoise1.getParam("noiseZ")
    param.setExpression("frame * (thisGroup.noiseani.get() / 2)", False, 0)
    del param
    param = groupSeNoise1.getParam("noiseType")
    group.getParam("SeNoise1noiseType").setAsAlias(param)
    del param
    param = groupSeNoise1.getParam("voronoiType")
    group.getParam("SeNoise1voronoiType").setAsAlias(param)
    del param
    param = groupUnpremult1.getParam("disableNode")
    param.setExpression("1-thisGroup.unpremultiy.get()", False, 0)
    del param
    param = groupErode1.getParam("size")
    group.getParam("Erode1size").setAsAlias(param)
    del param
    param = groupIDistort2.getParam("uvScale")
    param.setExpression("distsize = thisGroup.IDistort1.uvScale.get()[dimension]", False, 0)
    param.setExpression("distsize = thisGroup.IDistort1.uvScale.get()[dimension]", False, 1)
    del param
    param = groupBlur1.getParam("size")
    group.getParam("Blur1size").setAsAlias(param)
    del param
    param = groupPremult1.getParam("disableNode")
    param.setExpression("1-thisGroup.unpremultiy.get()", False, 0)
    del param

    try:
        extModule = sys.modules["lp_roughenEdgesExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
