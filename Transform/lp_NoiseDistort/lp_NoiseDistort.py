# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_NoiseDistortExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_NoiseDistortExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_NoiseDistort"

def getLabel():
    return "lp_NoiseDistort"

def getVersion():
    return 2

def getGrouping():
    return "Transform"

def getPluginDescription():
    return "Distorts an image based on two different noise-layer for a more dynamic feel.\nCan bring dead background photos (plants, water, etc) to life :)\n\nINPUTS\nimg = connect the main plate you want to distort\nmask = masks the effect by a connected alpha-channel (needs to be activated within the tool)\n\nHOW TO USE IT\nAfter connecting a plate, it makes sense to see if the size of small and big noise is appropriate. You can check the \"preview noise\" box to match the small noise with fine detail (e.g. leafs on a tree) and the big noise more with general areas (e.g. branches for a tree). In the Noise-tab you can adjust the look of the noise (and therefore the distortion) even further. Set the gain of the distortion appropriate to the needed movement.\nBy default, the noise is animated over time, you can adjust the frequency with the motion factor. You can also erase the Expression and animate this by hand, in case you need a sudden stop or increase of the movement.  \n\nHOW DOES IT WORK\nBasically, two noises are created from the input format - one small, one big. An IDistort uses these as UV-plate to distort the plate - a very simple approach but can have a large impact :)"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.6667, 0, 1)

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createSeparatorParam("sep01", "distortion amount")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createDouble2DParam("IDistort1uvScale", "gain")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(5, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.IDistort1uvScale = param
    del param

    param = lastNode.createBooleanParam("offsetcor", " ")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Automatically corrects for the offset introduced by big distortions. \nUseful for distorting premultiplied inputs and alphas.\n\nDoesn\'t work too great when noise gets rotated, adjust offset manually if needed.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.offsetcor = param
    del param

    param = lastNode.createDouble2DParam("offsetman", "offset correction | manual adjustment   ")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(20, 1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Adjusts the automatic offset to fit manual needs :)")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.offsetman = param
    del param

    param = lastNode.createSeparatorParam("sep02", "noise size")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createDouble2DParam("smallNoisenoiseSize", "small noise")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(8, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setDisplayMinimum(1, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(8, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Set size of the small noise.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.smallNoisenoiseSize = param
    del param

    param = lastNode.createDouble2DParam("bigNoisenoiseSize", "big noise")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(60, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setDisplayMinimum(1, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(60, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets size of the big noise.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.bigNoisenoiseSize = param
    del param

    param = lastNode.createDoubleParam("Transform1rotate", "rotation")
    param.setDisplayMinimum(-180, 0)
    param.setDisplayMaximum(180, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Rotates the noise. Only when aspect ratio is changed.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    
    lastNode.Transform1rotate = param
    del param

    param = lastNode.createBooleanParam("prevnoise", " ")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Previews the noise layer in R and G channel, helpful for matching size etc.\n\nUse the mix overlay to see it even better! :)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.prevnoise = param
    del param

    param = lastNode.createDoubleParam("Merge3mix", "preview noise | mix overlay   ")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Previews the noise layer in R and G channel, helpful for matching size etc.\n\nUse the mix overlay to see it even better! :)")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Merge3mix = param
    del param

    param = lastNode.createSeparatorParam("sep03", "noise motion")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createDouble2DParam("motionfac", "motion factor")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(1.6, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(20, 1)
    param.setDefaultValue(1.6, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Multiplier for the automatic noise animation over time. \n\nHit \'2\' to set it individually for small and big noise (x = small noise, y = big noise)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.motionfac = param
    del param

    param = lastNode.createDoubleParam("smallNoisenoiseZ", "small noise")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Time is multiplied by the motion factor to automatically animate the noise layer.\n\nIf manual animation is needed, simply erase the expression and adjust as needed.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.208, 0)
    lastNode.smallNoisenoiseZ = param
    del param

    param = lastNode.createDoubleParam("bigNoisenoiseZ", "big noise")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Time is multiplied by the motion factor to automatically animate the noise layer.\n\nIf manual animation is needed, simply erase the expression and adjust as needed.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.208, 0)
    lastNode.bigNoisenoiseZ = param
    del param

    param = lastNode.createSeparatorParam("sep04", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createBooleanParam("IDistort1enableMask_Mask", "use mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Enables the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.IDistort1enableMask_Mask = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Inverts the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    param = lastNode.createStringParam("credit", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_NoiseDistort v2.0\n(c) 2016 by lucas pfaff\nthis was my very first Nuke-tool :) inspired by a tutorial from VFXLUNCHBOX")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.credit = param
    del param

    lastNode.noisectrl = lastNode.createPageParam("noisectrl", "Noise")
    param = lastNode.createChoiceParam("smallNoisenoiseType", "small noise type")
    param.setDefaultValue(2)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.noisectrl.addParam(param)

    # Set param properties
    param.setHelp("Selects the type of noise.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.smallNoisenoiseType = param
    del param

    param = lastNode.createChoiceParam("bigNoisenoiseType", "big noise type")
    param.setDefaultValue(2)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.noisectrl.addParam(param)

    # Set param properties
    param.setHelp("Selects the type of noise.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.bigNoisenoiseType = param
    del param

    param = lastNode.createDouble2DParam("octavesctrl", "octaves")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(10, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(10, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.noisectrl.addParam(param)

    # Set param properties
    param.setHelp("Controls the total number of frequencies.\n\nHit the \'2\' for individual control of small and big noise (x = small noise, y = big noise)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.octavesctrl = param
    del param

    param = lastNode.createDouble2DParam("lacunaritycntrl", "lacunarity")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(2, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(10, 1)
    param.setDefaultValue(2, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.noisectrl.addParam(param)

    # Set param properties
    param.setHelp("Lacunarity is the spacing between frequencies. A value of 2 means each octave is twice the previous frequency.\n\nHit the \'2\' for individual control of small and big noise (x = small noise, y = big noise)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.lacunaritycntrl = param
    del param

    param = lastNode.createDouble2DParam("gainctrl", "gain")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.noisectrl.addParam(param)

    # Set param properties
    param.setHelp("The gain controls how much each frequency is scaled in relation to the previous frequency.\n\nHit the \'2\' for individual control of small and big noise (x = small noise, y = big noise)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.gainctrl = param
    del param

    param = lastNode.createDouble2DParam("gammactrl", "gamma")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.noisectrl.addParam(param)

    # Set param properties
    param.setHelp("Adjusts the gamma of the noise layer.\n\nHit the \'2\' for individual control of small and big noise (x = small noise, y = big noise)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setCanAutoFoldDimensions(True)
    lastNode.gammactrl = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'noisectrl', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(2913, 2159)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(2918, -692)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "IDistort1"
    lastNode = app.createNode("net.sf.openfx.IDistort", 2, group)
    lastNode.setScriptName("IDistort1")
    lastNode.setLabel("IDistort1")
    lastNode.setPosition(2913, 572)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupIDistort1 = lastNode

    param = lastNode.getParam("uvScale")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "IDistort1"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(2918, -428)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    del lastNode
    # End of node "Transform1"

    # Start of node "bigNoise"
    lastNode = app.createNode("net.sf.openfx.SeNoise", 1, group)
    lastNode.setScriptName("bigNoise")
    lastNode.setLabel("bigNoise")
    lastNode.setPosition(3350, -39)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.75, 0.75, 0.75)
    groupbigNoise = lastNode

    param = lastNode.getParam("noiseSize")
    if param is not None:
        param.setValue(60, 0)
        param.setValue(60, 1)
        del param

    param = lastNode.getParam("noiseZ")
    if param is not None:
        param.setValue(0.208, 0)
        del param

    param = lastNode.getParam("fbmOctaves")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("fbmLacunarity")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("fbmGain")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    del lastNode
    # End of node "bigNoise"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(3281, -141)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "smallNoise"
    lastNode = app.createNode("net.sf.openfx.SeNoise", 1, group)
    lastNode.setScriptName("smallNoise")
    lastNode.setLabel("smallNoise")
    lastNode.setPosition(3125, -44)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.75, 0.75, 0.75)
    groupsmallNoise = lastNode

    param = lastNode.getParam("noiseSize")
    if param is not None:
        param.setValue(8, 0)
        param.setValue(8, 1)
        del param

    param = lastNode.getParam("noiseZ")
    if param is not None:
        param.setValue(0.208, 0)
        del param

    param = lastNode.getParam("fbmOctaves")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("fbmLacunarity")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("fbmGain")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    del lastNode
    # End of node "smallNoise"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(3281, -298)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(2958, -298)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(3383, 220)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(3158, 220)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(3274, 581)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(2913, 800)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Transform2"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(2958, 699)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Transform2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2")
    lastNode.setLabel("Transform2_2")
    lastNode.setPosition(3531, 801)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Transform2_2"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(3347, 1044)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("multiply")
        del param

    param = lastNode.getParam("AChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(3531, 1268)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Premult1"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(2913, 1322)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(3576, 1348)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "offsetCorrect"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("offsetCorrect")
    lastNode.setLabel("offsetCorrect")
    lastNode.setPosition(2913, 1471)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupoffsetCorrect = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(1.666666666666667, 0)
        param.setValue(1.666666666666667, 1)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "offsetCorrect"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(3576, -298)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(2963, -558)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(3113, 75)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Grade2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade2")
    lastNode.setLabel("Grade2")
    lastNode.setPosition(3338, 86)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade2 = lastNode

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Grade2"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(2454, 206)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(2499, 581)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(2454, 377)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(2499, 1070)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(2700, 1819)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("copy")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(2745, -558)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(2913, 2021)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(2745, 2030)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(3274, 923)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(2499, 1839)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(2958, 1839)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(3530, 1172)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Grade3"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3")
    lastNode.setLabel("Grade3")
    lastNode.setPosition(3236, -212)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade3"

    # Start of node "Shuffle6"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Shuffle6")
    lastNode.setLabel("Shuffle6")
    lastNode.setPosition(3229, 211)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle6 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    param = lastNode.getParam("setGBAFromR")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Shuffle6"

    # Start of node "Shuffle5"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Shuffle5")
    lastNode.setLabel("Shuffle5")
    lastNode.setPosition(3531, 914)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle5 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle5"

    # Start of node "Shuffle5_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Shuffle5_2")
    lastNode.setLabel("Shuffle5_2")
    lastNode.setPosition(3530, 1048)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle5_2 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle5_2"

    # Start of node "IDistort2"
    lastNode = app.createNode("net.sf.openfx.IDistort", 2, group)
    lastNode.setScriptName("IDistort2")
    lastNode.setLabel("IDistort2")
    lastNode.setPosition(3101, 403)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupIDistort2 = lastNode

    del lastNode
    # End of node "IDistort2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupSwitch1)
    groupIDistort1.connectInput(0, groupDot3)
    groupIDistort1.connectInput(1, groupDot6)
    groupIDistort1.connectInput(2, groupDot12)
    groupTransform1.connectInput(0, groupDot11)
    groupbigNoise.connectInput(0, groupDot1)
    groupDot1.connectInput(0, groupGrade3)
    groupsmallNoise.connectInput(0, groupDot1)
    groupDot2.connectInput(0, groupDot3)
    groupDot3.connectInput(0, groupTransform1)
    groupDot4.connectInput(0, groupGrade2)
    groupDot5.connectInput(0, groupGrade1)
    groupDot6.connectInput(0, groupShuffle6)
    groupTransform2.connectInput(0, groupDot9)
    groupDot9.connectInput(0, groupIDistort1)
    groupTransform2_2.connectInput(0, groupDot10)
    groupMerge2.connectInput(0, groupShuffle5)
    groupMerge2.connectInput(1, groupDot13)
    groupPremult1.connectInput(0, groupSwitch2)
    groupMerge3.connectInput(0, groupTransform2)
    groupMerge3.connectInput(1, groupDot8)
    groupDot8.connectInput(0, groupPremult1)
    groupoffsetCorrect.connectInput(0, groupMerge3)
    groupDot10.connectInput(0, groupDot2)
    groupDot11.connectInput(0, groupimg)
    groupGrade1.connectInput(0, groupsmallNoise)
    groupGrade2.connectInput(0, groupbigNoise)
    groupDot12.connectInput(0, groupInvert1)
    groupInvert1.connectInput(0, groupmask)
    groupDot13.connectInput(0, groupDot12)
    groupMerge1.connectInput(0, groupDot16)
    groupMerge1.connectInput(1, groupDot18)
    groupMerge1.connectInput(2, groupDot17)
    groupDot16.connectInput(0, groupDot11)
    groupSwitch1.connectInput(0, groupDot18)
    groupSwitch1.connectInput(1, groupDot14)
    groupDot14.connectInput(0, groupMerge1)
    groupDot7.connectInput(0, groupDot6)
    groupDot17.connectInput(0, groupDot13)
    groupDot18.connectInput(0, groupoffsetCorrect)
    groupSwitch2.connectInput(0, groupShuffle5_2)
    groupSwitch2.connectInput(1, groupMerge2)
    groupGrade3.connectInput(0, groupDot2)
    groupShuffle6.connectInput(0, groupDot4)
    groupShuffle6.connectInput(1, groupDot5)
    groupShuffle5.connectInput(0, groupTransform2_2)
    groupShuffle5.connectInput(1, groupDot7)
    groupShuffle5_2.connectInput(0, groupShuffle5)

    param = groupIDistort1.getParam("uvScale")
    group.getParam("IDistort1uvScale").setAsAlias(param)
    del param
    param = groupIDistort1.getParam("enableMask_Mask")
    group.getParam("IDistort1enableMask_Mask").setAsAlias(param)
    del param
    param = groupTransform1.getParam("rotate")
    group.getParam("Transform1rotate").setAsAlias(param)
    del param
    param = groupbigNoise.getParam("noiseSize")
    group.getParam("bigNoisenoiseSize").setAsAlias(param)
    del param
    param = groupbigNoise.getParam("noiseZ")
    group.getParam("bigNoisenoiseZ").setAsAlias(param)
    del param
    param = groupbigNoise.getParam("noiseType")
    group.getParam("bigNoisenoiseType").setAsAlias(param)
    del param
    param = groupbigNoise.getParam("fbmOctaves")
    param.setExpression("thisGroup.octavesctrl.get()[1]", False, 0)
    del param
    param = groupbigNoise.getParam("fbmLacunarity")
    param.setExpression("thisGroup.lacunaritycntrl.get()[1]", False, 0)
    del param
    param = groupbigNoise.getParam("fbmGain")
    param.setExpression("thisGroup.gainctrl.get()[1]", False, 0)
    del param
    param = groupsmallNoise.getParam("noiseSize")
    group.getParam("smallNoisenoiseSize").setAsAlias(param)
    del param
    param = groupsmallNoise.getParam("noiseZ")
    group.getParam("smallNoisenoiseZ").setAsAlias(param)
    del param
    param = groupsmallNoise.getParam("noiseType")
    group.getParam("smallNoisenoiseType").setAsAlias(param)
    del param
    param = groupsmallNoise.getParam("fbmOctaves")
    param.setExpression("thisGroup.octavesctrl.get()[dimension]", False, 0)
    del param
    param = groupsmallNoise.getParam("fbmLacunarity")
    param.setExpression("thisGroup.lacunaritycntrl.get()[0]", False, 0)
    del param
    param = groupsmallNoise.getParam("fbmGain")
    param.setExpression("thisGroup.gainctrl.get()[0]", False, 0)
    del param
    param = groupTransform2.getParam("rotate")
    param.setExpression("Transform1.rotate.get()*-1", False, 0)
    del param
    param = groupTransform2_2.getParam("rotate")
    param.setExpression("Transform2.rotate.get()", False, 0)
    del param
    param = groupMerge3.getParam("mix")
    group.getParam("Merge3mix").setAsAlias(param)
    del param
    param = groupMerge3.getParam("disableNode")
    param.setExpression("1-thisGroup.prevnoise.get()", False, 0)
    del param
    param = groupoffsetCorrect.getParam("translate")
    param.setExpression("(IDistort1.uvScale.get()[0]/3)+thisGroup.offsetman.get()[0]", False, 0)
    param.setExpression("(IDistort1.uvScale.get()[1]/3)+thisGroup.offsetman.get()[1]", False, 1)
    del param
    param = groupoffsetCorrect.getParam("disableNode")
    param.setExpression("1-thisGroup.offsetcor.get()", False, 0)
    del param
    param = groupGrade1.getParam("gamma")
    param.setExpression("thisGroup.gammactrl.get()[0]", False, 0)
    param.setExpression("thisGroup.gammactrl.get()[0]", False, 1)
    param.setExpression("thisGroup.gammactrl.get()[0]", False, 2)
    param.setExpression("thisGroup.gammactrl.get()[0]", False, 3)
    del param
    param = groupGrade2.getParam("gamma")
    param.setExpression("thisGroup.gammactrl.get()[1]", False, 0)
    param.setExpression("thisGroup.gammactrl.get()[1]", False, 1)
    param.setExpression("thisGroup.gammactrl.get()[1]", False, 2)
    param.setExpression("thisGroup.gammactrl.get()[1]", False, 3)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.IDistort1enableMask_Mask.get()", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.IDistort1enableMask_Mask.get()", False, 0)
    del param

    param = group.getParam("smallNoisenoiseZ")
    param.setExpression("frame*(thisNode.motionfac.get()[0]/100)", False, 0)
    del param
    param = group.getParam("bigNoisenoiseZ")
    param.setExpression("frame*(thisNode.motionfac.get()[1]/100)", False, 0)
    del param
    try:
        extModule = sys.modules["lp_NoiseDistortExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
